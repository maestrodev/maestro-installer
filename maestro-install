#!/bin/bash

MAESTRO_BASE=/usr/local/maestro
MAESTRO_BIN=$MAESTRO_BASE/bin
MAESTRO_CONFIG_BASE=/var/local/maestro
MAESTRO_CONFIG_DIR=$MAESTRO_CONFIG_BASE/conf
MAESTRO_LUCEE_CONFIG="$MAESTRO_CONFIG_DIR/maestro_lucee.json"
MAESTRO_AGENT_BASE=/var/local/maestro-agent

HOSTNAME=`hostname -f`
PGDATA=/var/lib/pgsql/data

MAX_LUCEE_WAIT_TIME=300

# catch ctrl-c and stop the script from continuing
trap 'echo "Maestro install interrupted"; exit' INT

# detect proper os version
if [ ! -f /etc/redhat-release ]; then
    echo "This script requires RHEL/CentOS 6.4+"
    exit 1
fi

# verify root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run with root privileges" 2>&1
    exit 1
fi

# load the account properties from the config dir
if [ -e $MAESTRO_CONFIG_DIR/maestro-account.properties ]; then
    echo "Loading account credentials from $MAESTRO_CONFIG_DIR/maestro-account.properties"
    . $MAESTRO_CONFIG_DIR/maestro-account.properties
else
    echo "Please provide your Maestro Account credentials"
    read -u 1 -r -p "Username: " USERNAME
    read -u 1 -s -r -p "Password: " PASSWORD; echo
fi

# verify something was specified
if [[ $USERNAME == "" || $PASSWORD == "" ]]; then
    echo "Please enter valid credentials or configure Maestro account credentials in $MAESTRO_CONFIG_DIR/maestro-account.properties"
    exit 1
else
    # create the config directory
    if [ ! -d $MAESTRO_CONFIG_DIR ]; then
        mkdir -p $MAESTRO_CONFIG_DIR
    fi

    # create the account properties file in the config dir
    cat > $MAESTRO_CONFIG_DIR/maestro-account.properties <<END
USERNAME=$USERNAME
PASSWORD=$PASSWORD
END

    # check the result
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Failed to save Maestro Account properties to $MAESTRO_CONFIG_DIR/maestro-account.properties"
        exit 1
    else
        echo "Saved Maestro Account properties to $MAESTRO_CONFIG_DIR/maestro-account.properties"
    fi
fi

# determine if we're installing snapshot or release versions
ENABLE_SNAPSHOTS=0
if [ "$1" == "snapshots" ]; then
    ENABLE_SNAPSHOTS=1
    echo "Installing snapshot versions"
else
    echo "Installing release versions"
fi

# install latest EPEL
if [ ! -e /etc/yum.repos.d/epel.repo ]; then
    echo -n "Installing latest EPEL yum repo RPM..."

    cat <<EOM >/etc/yum.repos.d/epel-bootstrap.repo
[epel]
name=Bootstrap EPEL
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-6&arch=x86_64
failovermethod=priority
enabled=0
gpgcheck=0
EOM

    # install the latest EPEL release
    yum --enablerepo=epel -y install epel-release
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "failed"
        exit 1
    fi
    echo "success"

    # remove the EPEL bootstrap yum repo
    rm -f /etc/yum.repos.d/epel-bootstrap.repo
else
    echo "Detected configured EPEL yum repos"
fi

# add MaestroDev yum repos
echo "Configuring MaestroDev yum repos"

# add the MaestroDev repositories
cat > /etc/yum.repos.d/maestrodev.repo << EOF
[maestrodev]
name=MaestroDev Products EL 6 - \$basearch
baseurl=https://$USERNAME:$PASSWORD@yum.maestrodev.com/el/6/\$basearch
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-maestrodev
enabled=1
gpgcheck=0

[maestrodev-snapshots]
name=MaestroDev Snapshots EL 6 - \$basearch
baseurl=https://$USERNAME:$PASSWORD@yum.maestrodev.com/snapshots/el/6/\$basearch
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-maestrodev
enabled=$ENABLE_SNAPSHOTS
gpgcheck=0
EOF

# install maestro
if rpm -qa | grep maestro | grep -v agent 2>&1 > /dev/null; then
    echo "Maestro already installed"
else 
    echo "Installing Maestro"
    yum -y install maestro
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Unable to install Maestro package"
        exit 1
    fi
fi

# now that we have our maestro user, chown the account properties file
chown maestro:maestro $MAESTRO_CONFIG_DIR/maestro-account.properties

# install maestro agent
if rpm -qa | grep maestro-agent 2>&1 > /dev/null; then
    echo "Maestro Agent already installed"
else
    echo "Installing Maestro Agent"
    yum -y install maestro-agent
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Unable to install Maestro Agent package"
        exit 1
    fi
fi

# create fake server key
if [ ! -e /var/local/maestro-agent/.maestro/server.key ]; then
    echo "Creating Maestro Agent server.key"
    mkdir -p $MAESTRO_AGENT_BASE/.maestro
    echo "server.key" > $MAESTRO_AGENT_BASE/.maestro/server.key
else
    echo "Found existing Maestro Agent server.key"
fi

if ! rpm -qa | grep perl-JSON-XS 2>&1 > /dev/null; then
    echo "Installing Perl JSON::XS"
    yum -y install perl-JSON-XS
fi

echo "Loading LuCEE configuration"

function get_db_value {
PERL=$(cat<<__PERL__
    use JSON::XS; 
    undef \$/;
    \$config = <STDIN>; 
    \$/ = "\n";
    my \$json = decode_json \$config; 
    my \$lucee = \$\$json{'lucee'}; 
    my \$database = \$\$lucee{'database'};
    print \$\$database{"$1"};
    print $1;
__PERL__
)
    cat $MAESTRO_LUCEE_CONFIG | perl -e "$PERL"
}

# parse the db details from the config
URL=`get_db_value "url"`
if [[ $URL != "null" && $URL != "" ]]; then
    echo "Parsing database URL: $URL"
    eval $(echo $URL | perl -e 'undef $/; $url = <STDIN>; if ($url =~ m%^postgres://([^:@]+)(:([^:@]+))?@([^:/]+)(:([0-9]+))?/([^/]+)%) { print "USER=$1\nPASS=$3\nHOST=$4\nPORT=$6\nDATABASE=$7\n" }')
else
    echo "Not using database URL"
    USER=`get_db_value "user"`
    PASS=`get_db_value "pass"`
    HOST=`get_db_value "host"`
    PORT=`get_db_value "port"`
    DATABASE=`get_db_value "database_name"`
fi

# attempt to connect to the database

echo "Checking PostgreSQL installation"
PSQL_COMMAND=`command -v psql`

# determine if psql exists
if [ -z $PSQL_COMMAND ]; then
    echo "PostgreSQL binaries not found.  Check to ensrure that PostgreSQL is installed."
    exit 1
else
    echo "Using PostgreSQL command: $PSQL_COMMAND"
fi

# ensure postgresql is set to start on startup
/sbin/chkconfig postgresql on

# ensure postgresql is runnning
if [[ -z `/sbin/service postgresql status | grep 'is running'` ]]; then
    echo -n "Starting PostgreSQL..."
    /sbin/service postgresql start &> /dev/null 2>&1
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then

	if [ -f "$PGDATA/PG_VERSION" ] && [ -d "$PGDATA/base" ]; then
            echo "failed"
            exit 1
        else
            echo "not yet initialized"

            # try to initialize the database first
            /sbin/service postgresql initdb
            RETVAL=$?
        
            if [ $RETVAL -ne 0 ]; then
                echo "Failed to initialize PostgreSQL"
                exit 1
            fi

            # try to start it again
            echo -n "Starting PostgreSQL..."
            /sbin/service postgresql start &> /dev/null 2>&1
            RETVAL=$?
        
            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                exit 1
            fi
        fi
    else
        echo "done"
    fi
else
    echo "PostgreSQL already running"
fi

echo "Checking database connectivity"

# test for a valid Maestro user
OUTPUT=`PGPASSWORD="$PASS" psql -l -h $HOST -p $PORT -U $USER 2>&1`
if [ $? -eq 0 ]; then
    echo "Valid Maestro PostgreSQL user found"
else
    echo $OUTPUT
    if [[ ! -z `echo $OUTPUT | grep 'Ident authentication failed for user'` ]]; then
        echo "PostgreSQL pg_hba.conf not configured for password authentication via TCP/IP.  Please ensure that PostgreSQL is configured to listen for connections on $PORT and that password auth is configured and higher in priority than ident auth.  The credentials should match those in $MAESTRO_LUCEE_CONFIG.  Restarting PostgreSQL will be necessary for changes to postgresql.conf or pg_hba.conf."
        echo ""
        echo "Example entry for /var/lib/pgsql/data/postgresql.conf:"
        echo "    listen_addresses = 'localhost'"
        echo ""
        echo "Example entry for /var/lib/pgsql/data/pg_hba.conf:"
        echo "    host    all         all         127.0.0.1/32          md5"
        echo "    host    all         all         ::1/128               md5"
        exit 1
    fi

    echo "No valid Maestro PostgreSQL user found"
    read -u 1 -r -p "Would you like to configure a Maestro PostgreSQL user now? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY]) 
            echo -n "Creating Maestro PostgreSQL user..."
            su - postgres -c "psql -c \"CREATE ROLE $USER UNENCRYPTED PASSWORD '$PASS' NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN;\"" &> /dev/null

            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                exit 1
            fi
            echo "success"
            
            ;;
        *)
            echo "No valid database user...exiting"
            exit 1
            ;;
    esac
fi

# check for maestro db
PGPASSWORD="$PASS" psql -l -h $HOST -p $PORT -U $USER maestro &> /dev/null
if [ $? -eq 0 ]; then
    echo "Maestro database found"
else
    read -u 1 -r -p "Would you like to create the Maestro database now? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY]) 
            echo -n "Creating Maestro PostgreSQL database..."
            su - postgres -c "createdb -O maestro maestro" &> /dev/null
            RETVAL=$?

            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                echo "Failed to connect with HOST=$HOST PORT=$PORT USER=$USER DB=maestro, please check PostgreSQL installation and settings in $CONFIG"
                exit 1
            fi
            echo "success"
            
            ;;
        *)
            echo "Failed to connect with HOST=$HOST PORT=$PORT USER=$USER DB=maestro, please check PostgreSQL installation and settings in $CONFIG"
            exit 1
            ;;
    esac
fi

# check for luceedb db
PGPASSWORD="$PASS" psql -l -h $HOST -p $PORT -U $USER $DATABASE &> /dev/null
if [ $? -eq 0 ]; then
    echo "Maestro LuCEE database found"
else
    read -u 1 -r -p "Would you like to create the Maestro LuCEE database now? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY]) 
            echo -n "Creating Maestro LuCEE PostgreSQL database..."
            su - postgres -c "createdb -O maestro $DATABASE" &> /dev/null
            RETVAL=$?

            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                echo "Failed to connect with HOST=$HOST PORT=$PORT USER=$USER DB=$DATABASE, please check PostgreSQL installation and settings in $CONFIG"
                exit 1
            fi
            echo "success"
            
            ;;
        *)
            echo "Failed to connect with HOST=$HOST PORT=$PORT USER=$USER DB=$DATABASE, please check PostgreSQL installation and settings in $CONFIG"
            exit 1
            ;;
    esac
fi

# ensure activemq will start on boot
/sbin/chkconfig activemq on

# ensure activemq is runnning
if [[ -z `/sbin/service activemq status | grep 'is running'` ]]; then
    echo -n "Starting ActiveMQ..."
    /sbin/service activemq start &> /dev/null
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "failed"
        exit 1
    fi

    echo "success"
else
    echo "ActiveMQ is running"
fi

# ensure mongo will start on boot
/sbin/chkconfig mongod on

# ensure mongo is runnning
if [[ -z `/sbin/service mongod status | grep 'is running'` ]]; then
    echo -n "Starting MongoDB..."
    /sbin/service mongod start &> /dev/null
    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "failed"
        exit 1
    fi

    echo "success"
else
    echo "MongoDB is running"
fi

# ensure maestro agent is running
if [[ -z `/sbin/service maestro-agent status | grep 'is running'` ]]; then
    echo -n "Starting Maestro Agent..."
    /sbin/service maestro-agent start &> /dev/null

    if [ $? -ne 0 ]; then
        echo "failed"
        exit 1
    fi

    echo "success"
else
    echo "Maestro Agent is running"
fi

# ensure maestro is running
if [[ -z `/sbin/service maestro status | grep 'is running'` ]]; then
    echo -n "Starting Maestro..."
    /sbin/service maestro start &> /dev/null

    if [ $? -ne 0 ]; then
        echo "failed"
        exit 1
    fi

    echo "success"
else
    echo "Maestro is running"
fi

echo -n "Checking if LuCEE is available for plugin installation..."

# check if LuCEE is ready to install plugins
$MAESTRO_BIN/maestro-plugins list > /dev/null 2>&1
if [ $? -ne 0 ]; then
    echo "not ready"

    # wait for LuCEE to start
    LUCEE_STARTED=0
    START_TIME=$(date +%s)
    echo -n "Waiting for LuCEE to become available..."
    while [ $LUCEE_STARTED -eq 0 ]; do 
        $MAESTRO_BIN/maestro-plugins list > /dev/null 2>&1
    
        if [ $? -ne 0 ]; then
            echo -n "."
            END_TIME=$(date +%s)
            TOTAL_TIME=$(($END_TIME - $START_TIME))
            if [ $TOTAL_TIME -gt $MAX_LUCEE_WAIT_TIME ]; then
                echo "\nFailed: LuCEE took too long to start"
                exit 1
            fi
            sleep 5
        else
            echo "running"
            break
        fi
    done
else
    echo "ready"
fi

# install some plugins
echo "Installing Maestro Plugins"
$MAESTRO_BIN/maestro-plugins install all
RETVAL=$?
if [ $RETVAL -ne 0 ]; then
    echo "Failed to install Maestro Plugins"
    exit 1
fi
echo "Installed Maestro Plugins"

echo "Installation complete."
echo "Please check logs in $MAESTRO_BASE/logs and $MAESTRO_AGENT_BASE/logs for troubleshooting."
echo "Ensure that your firewall is configured to allow remote access to port 8080 and browse to http://$HOSTNAME:8080/"
