#!/bin/bash

MAESTRO_BASE=/usr/local/maestro
MAESTRO_BIN=$MAESTRO_BASE/bin
MAESTRO_CONFIG_BASE=/var/local/maestro
MAESTRO_CONFIG_DIR=$MAESTRO_CONFIG_BASE/conf
MAESTRO_LUCEE_CONFIG="$MAESTRO_CONFIG_DIR/maestro_lucee.json"
MAESTRO_AGENT_BASE=/var/local/maestro-agent

HOSTNAME=`hostname -f`
PGDATA=/var/lib/pgsql/data

MAX_SERVICE_WAIT_TIME=60
MAX_LUCEE_WAIT_TIME=300
MAX_ACTIVEMQ_WAIT_TIME=60

# catch ctrl-c and stop the script from continuing
trap 'echo "Maestro install interrupted"; exit' INT

# detect proper os version
if [ ! -f /etc/redhat-release ]; then
    echo "This script requires RHEL/CentOS 6.4+"
    exit 1
fi

# verify root
if [[ $EUID -ne 0 ]]; then
    echo "This script must be run with root privileges" 2>&1
    exit 1
fi

main() {
    load_credentials

    check_enable_snapshots $1
    install_epel_repo
    install_maestrodev_repo
    install_maestro

    save_credentials
    
    install_maestro_agent

     # test for java
    #ensure_javac
    #ensure_package_installed 'java7-devel'

    load_lucee_config
    is_local_db 
    if [ $? -eq 0 ]; then
        echo "Using local PostgreSQL"
        verify_db_installation
    fi
    
    verify_db_user 
    if [ $? -eq 1 ]; then
        create_db_user
    fi
    ensure_db_exists $DB_DATABASE
    ensure_db_exists 'maestro'
   
    is_local_stomp  
    if [ $? -eq 0 ]; then
        echo "Using local ActiveMQ"
        ensure_service_running 'activemq'
        wait_for_activemq
    fi
    verify_stomp
    
    ensure_service_running 'mongod'
    ensure_service_running 'maestro-agent'
    ensure_service_running 'maestro'

    install_maestro_plugins
    
    echo "Installation complete."
    echo "Please check logs in $MAESTRO_BASE/logs and $MAESTRO_AGENT_BASE/logs for troubleshooting."
    echo "Ensure that your firewall is configured to allow remote access to port 8080 and browse to http://$HOSTNAME:8080/"
}

valid_credentials() {
    STATUS_CODE=`curl -o /dev/null --silent --head --write-out '%{http_code}\n' https://$USERNAME:$PASSWORD@yum.maestrodev.com/`
    if [ $STATUS_CODE -ne "200" ]; then
        return 1
    fi
    return 0
}

prompt_credentials() {
    echo "Please provide your Maestro Account credentials"
    read -u 1 -r -p "Username: " USERNAME
    read -u 1 -s -r -p "Password: " PASSWORD; echo
}

load_credentials() {
    # load the account properties from the config dir
    HAVE_ACCOUNT_CONFIG=0
    OVERRIDE_CONFIG=0
    if [ -e $MAESTRO_CONFIG_DIR/maestro-account.properties ]; then
        HAVE_ACCOUNT_CONFIG=1
    
        echo "Loading account credentials from '$MAESTRO_CONFIG_DIR/maestro-account.properties'"
        . $MAESTRO_CONFIG_DIR/maestro-account.properties
    
        valid_credentials
        if [ $? -ne 0 ]; then
            echo "Invalid credentials specified"
            prompt_credentials
            OVERRIDE_CONFIG=1
        fi
    else
        echo "No credentials in config"
        prompt_credentials
    fi
    
    # if no valid credentials, notify user and exit
    if ! valid_credentials; then
        if [ $HAVE_ACCOUNT_CONFIG -eq 1 ]; then 
            echo "Invalid credentials.  Please adjust the username/password in '$MAESTRO_CONFIG_DIR/maestro-account.properties'"
        else
            echo "Invalid credentials specified."
        fi
        exit 1
    fi
}

save_credentials() {
    # if the user doesn't already have credentials saved
    if [[ ! -e $MAESTRO_CONFIG_DIR/maestro-account.properties || $OVERRIDE_CONFIG -eq 1 ]]; then
        echo "Saving account credentials to '$MAESTRO_CONFIG_DIR/maestro-account.properties'"
    
        # create the config directory
        if [ ! -d $MAESTRO_CONFIG_DIR ]; then
            mkdir -p $MAESTRO_CONFIG_DIR
        fi
    
        # create the account properties file in the config dir
        cat > $MAESTRO_CONFIG_DIR/maestro-account.properties <<END
USERNAME=$USERNAME
PASSWORD=$PASSWORD
END
    
        # check the result
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "Failed to save Maestro Account properties to '$MAESTRO_CONFIG_DIR/maestro-account.properties'"
            exit 1
        fi
    fi
    
    # now that we have our maestro user, chown the account properties file
    chown maestro:maestro "$MAESTRO_CONFIG_DIR/maestro-account.properties"
}

check_enable_snapshots() {
    # determine if we're installing snapshot or release versions
    ENABLE_SNAPSHOTS=0
    if [ "$1" == "snapshots" ]; then
        ENABLE_SNAPSHOTS=1
        echo "Installing snapshot versions"
    else
        echo "Installing release versions"
    fi
}

install_epel_repo() {
    # install latest EPEL
    if [ ! -e /etc/yum.repos.d/epel.repo ]; then
        echo -n "Installing latest EPEL yum repo RPM..."
    
        cat <<EOM >/etc/yum.repos.d/epel-bootstrap.repo
[epel]
name=Bootstrap EPEL
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-6&arch=x86_64
failovermethod=priority
enabled=0
gpgcheck=0
EOM
    
        # install the latest EPEL release
        yum --enablerepo=epel -y install epel-release
        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "failed"
            exit 1
        fi
        echo "success"
    
        # remove the EPEL bootstrap yum repo
        rm -f /etc/yum.repos.d/epel-bootstrap.repo
    else
        echo "Detected configured EPEL yum repos"
    fi
}

install_maestrodev_repo() {
    # add MaestroDev yum repos
    echo "Configuring MaestroDev yum repos"
    
    # add the MaestroDev repositories
    cat > /etc/yum.repos.d/maestrodev.repo << EOF
[maestrodev]
name=MaestroDev Products EL 6 - \$basearch
baseurl=https://$USERNAME:$PASSWORD@yum.maestrodev.com/el/6/\$basearch
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-maestrodev
enabled=1
gpgcheck=0

[maestrodev-snapshots]
name=MaestroDev Snapshots EL 6 - \$basearch
baseurl=https://$USERNAME:$PASSWORD@yum.maestrodev.com/snapshots/el/6/\$basearch
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-maestrodev
enabled=$ENABLE_SNAPSHOTS
gpgcheck=0
EOF
}

install_maestro() {
    ensure_package_installed 'maestro'
}

install_maestro_agent() {
    ensure_package_installed 'maestro-agent'

    # create fake server key
    if [ ! -e /var/local/maestro-agent/.maestro/server.key ]; then
        echo "Creating Maestro Agent server.key"
        mkdir -p $MAESTRO_AGENT_BASE/.maestro
        echo "server.key" > $MAESTRO_AGENT_BASE/.maestro/server.key
    else
        echo "Found existing Maestro Agent server.key"
    fi
}
    
get_db_value() {
    PERL=$(cat<<__PERL__
use JSON::XS; 
undef \$/;
\$config = <STDIN>; 
\$/ = "\n";
my \$json = decode_json \$config; 
my \$lucee = \$\$json{'lucee'}; 
my \$database = \$\$lucee{'database'};
print \$\$database{"$1"};
print $1;
__PERL__
    )
    cat $MAESTRO_LUCEE_CONFIG | perl -e "$PERL"
}
    
get_stomp_value() {
    PERL=$(cat<<__PERL__
use JSON::XS; 
undef \$/;
\$config = <STDIN>; 
\$/ = "\n";
my \$json = decode_json \$config; 
my \$lucee = \$\$json{'lucee'}; 
my \$database = \$\$lucee{'stomp'};
print \$\$database{"$1"};
print $1;
__PERL__
    )
    cat $MAESTRO_LUCEE_CONFIG | perl -e "$PERL"
}

load_lucee_config() {
    echo "Loading LuCEE configuration"

    ensure_package_installed 'perl-JSON-XS'
    
    # parse the db details from the config
    URL=`get_db_value "url"`
    if [[ $URL != "null" && $URL != "" ]]; then
        echo "Parsing database URL: $URL"
        eval $(echo $URL | perl -e 'undef $/; $url = <STDIN>; if ($url =~ m%^postgres://([^:@]+)(:([^:@]+))?@([^:/]+)(:([0-9]+))?/([^/]+)%) { print "DB_USER=$1\nDB_PASS=$3\nDB_HOST=$4\nDB_PORT=$6\nDB_DATABASE=$7\n" }')
    else
        #echo "Not using database URL"
        DB_USER=`get_db_value "user"`
        DB_PASS=`get_db_value "pass"`
        DB_HOST=`get_db_value "host"`
        DB_PORT=`get_db_value "port"`
        DB_DATABASE=`get_db_value "database_name"`
    fi
    
    # parse the stomp details from the config
    URL=`get_stomp_value "url"`
    if [[ $URL != "null" && $URL != "" ]]; then
        echo "Parsing stomp URL: $URL"
        eval $(echo $URL | perl -e 'undef $/; $url = <STDIN>; if ($url =~ m%^stomp://([^:@]+)(:([^:@]+))?@([^:/]+)(:([0-9]+))?%) { print "STOMP_USER=$1\nSTOMP_PASS=$3\nSTOMP_HOST=$4\nSTOMP_PORT=$6\n" }')
    else
        #echo "Not using stomp URL"
        STOMP_USER=`get_stomp_value "user"`
        STOMP_PASS=`get_stomp_value "passcode"`
        STOMP_HOST=`get_stomp_value "host"`
        STOMP_PORT=`get_stomp_value "port"`
    fi
}
    
is_local_db() {
    if [[ $DB_HOST == "localhost" || $DB_HOST == "127.0.0.1" ]]; then
        return 0
    fi
    return 1
}
    
is_local_stomp() {
    if [ $STOMP_HOST == "localhost" ] || [ $STOMP_HOST == "127.0.0.1" ]; then
        return 0
    fi
    return 1
}

verify_stomp() {
    # attempt to connect to the stomp server
    
    echo "Checking Stomp connectivity..."

    ensure_package_installed 'perl-Net-Stomp'

    PERL=$(cat<<"__PERL__"
use Net::Stomp;
my $host = shift @ARGV;
my $port = shift @ARGV;
my $user = shift @ARGV;
my $pass = shift @ARGV;
my $stomp = Net::Stomp->new( { hostname => $host, port => $port } );
my $con = $stomp->connect( { 
    login => $user, 
    passcode => $pass,
    timeout => 10.0
} );
if ($con->command ne "CONNECTED") {
   print "Error connecting via STOMP\n";
   exit 1;
} else {
    print "Connection via STOMP okay\n";
}
my @queues = ('/topic/plugin_status', '/queue/agents', '/queue/ruote_workitems', '/queue/maestro.agent.testagentqueue');
foreach my $queue (@queues) {
    my $s = $stomp->subscribe(
        {
            'destination'           => $queue,
            'ack'                   => 'client',
            'activemq.prefetchSize' => 1,
            'selector'              => "command = 'ERROR'"
        }
    );
    my $frame = $stomp->receive_frame({ timeout => 1.0 });
    if (defined($frame)) {
        if ($frame->command eq "ERROR") {
            my $body = $frame->body;
            if ($body =~ /not authorized/) {
                $stomp->ack( { frame => $frame } );
                print "Permission denied for '$queue'\n";
            } else {
                print "Error connecting to '$queue'\n";
            }
            exit 1;
        }
    } else {
        print "Queue '$queue' okay\n";
    }
}
$stomp->disconnect();
__PERL__
    )
    perl -e "$PERL" $STOMP_HOST $STOMP_PORT $STOMP_USER $STOMP_PASS

    RETVAL=$?

    if [ $RETVAL -ne 0 ]; then
        echo "Failed to connect to STOMP server host=$STOMP_HOST port=$STOMP_PORT user=$STOMP_USER.  Please check your LuCEE configuration at '$MAESTRO_LUCEE_CONFIG'"
        exit 1
    fi
}

verify_db_installation() {
    # attempt to connect to the database
    
    echo "Checking PostgreSQL installation"
    PSQL_COMMAND=`command -v psql`
    
    # determine if psql exists
    if [ -z $PSQL_COMMAND ]; then
        echo "No PostgreSQL found, installing"

        # install the default postgresql package for CentOS if nothign is currently installed
        ensure_package_installed 'postgresql-server'
    fi

    is_package_installed 'postgresql-server'
    if [ $? -eq 0 ]; then
        echo "Checking that PostgreSQL is initialized"

        # verify that we're initialized
        if [ ! -f "$PGDATA/PG_VERSION" ] || [ ! -d "$PGDATA/base" ]; then
            echo -n "Initializing PostgreSQL..."
        
            # try to initialize the database first
            /sbin/service postgresql initdb &> /dev/null
            RETVAL=$?
        
            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                exit 1
            fi
            echo "success"
        fi
        
        # ensure postgresql is set to start on startup
        echo "Setting PostgreSQL to start on boot"
        /sbin/chkconfig postgresql on

        # ensure that it's running
        echo "Ensure PostgreSQL is running"
        ensure_service_running 'postgresql'
    fi
    
    PSQL_COMMAND=`command -v psql`

    echo "Using PostgreSQL command: $PSQL_COMMAND"
}

verify_db_user() {
    echo "Checking database connectivity"

    if [ $DB_PASS == "" ]; then
        echo "Invalid Maestro PostgreSQL password found (empty)"
        exit 1
    fi

    # test for a valid Maestro user
    OUTPUT=`PGPASSWORD="$DB_PASS" psql -l -h $DB_HOST -p $DB_PORT -U $DB_USER 2>&1`
    if [ $? -eq 0 ]; then
        echo "Valid Maestro PostgreSQL user found"
        return 0
    else
        echo "Error: $OUTPUT"

        if [[ ! -z `echo $OUTPUT | grep 'Ident authentication failed for user'` ]]; then
            echo ""
            echo "PostgreSQL pg_hba.conf not configured for password authentication via
            TCP/IP. Please ensure that PostgreSQL is configured to listen on
            host=$DB_HOST port=$DB_PORT and allow password authentication."
            echo ""
            echo "!!! THESE CHANGES REQUIRE PostgreSQL TO BE RESTARTED !!!"
            echo ""
            echo "###"
            echo "Example entry for /var/lib/pgsql/data/postgresql.conf:"
            echo "    listen_addresses = '$DB_HOST' # specify the correct listen address here"
            echo ""
            echo "###"
            echo "Example entry for /var/lib/pgsql/data/pg_hba.conf:"
            echo "- substitue the correct source IP address for this Maestro server"
            echo "- password auth must be defined before ident auth for the same host"
            echo ""
            echo "host    all         all         127.0.0.1/32          md5"
            echo "host    all         all         ::1/128               md5"
            exit 1
        fi

        echo "No valid Maestro PostgreSQL user found"
        return 1
    fi
}

create_db_user() {
    read -u 1 -r -p "Would you like to configure a Maestro PostgreSQL user now? [y/N] " response
    case $response in
        [yY][eE][sS]|[yY]) 
            echo -n "Creating Maestro PostgreSQL user..."
            OUTPUT=`su - postgres -c "psql -c \"CREATE ROLE $DB_USER UNENCRYPTED PASSWORD '$DB_PASS' NOSUPERUSER NOCREATEDB NOCREATEROLE INHERIT LOGIN;\"" 2>&1`

            RETVAL=$?
            if [ $RETVAL -ne 0 ]; then
                echo "failed"
                echo "Error: $OUTPUT";
                exit 1
            fi
            echo "success"
            
            ;;
        *)
            echo "No valid database user...exiting"
            exit 1
            ;;
    esac
}

ensure_db_exists() {
    DATABASE=$1

    # check for maestro db
    PGPASSWORD="$DB_PASS" psql -l -h $DB_HOST -p $DB_PORT -U $DB_USER $DATABASE &> /dev/null
    if [ $? -eq 0 ]; then
        echo "Maestro database '$DATABASE' found"
    else
        echo "Maestro database '$DATABASE' not found"
        is_local_db 
        if [ $? -eq 0 ]; then
            read -u 1 -r -p "Would you like to create the '$DATABASE' database now? [y/N] " response
            case $response in
                [yY][eE][sS]|[yY]) 
                    echo -n "Creating Maestro PostgreSQL database '$DATABASE'..."
                    OUTPUT=`su - postgres -c "createdb -O maestro $DATABASE" 2>&1`
                    RETVAL=$?
        
                    if [ $RETVAL -ne 0 ]; then
                        echo "failed"
                        echo "Failed to connect with host=$DB_HOST port=$DB_PORT user=$DB_USER db=$DATABASE, please check PostgreSQL installation and settings in '$MAESTRO_LUCEE_CONFIG'"
                        echo "Error: $OUTPUT";
                        exit 1
                    fi
                    echo "success"
                    
                    ;;
                *)
                    echo "Failed to connect with host=$DB_HOST port=$DB_PORT user=$DB_USER db=$DATABASE, please check PostgreSQL installation and settings in '$MAESTRO_LUCEE_CONFIG'"
                    exit 1
                    ;;
            esac
        else
            echo "\nPlease ensure the database settings in '$MAESTRO_LUCEE_CONFIG' are correct (host=$DB_HOST, port=$DB_PORT) and that the '$DATABASE' database exists"
            exit 1
        fi
    fi
}

wait_for_activemq() {
    # wait for activemq
    START_TIME=$(date +%s)

    ensure_package_installed 'perl-Net-Stomp'

    echo -n "Waiting for 'activemq' to become available..."
    while [ 1 -eq 1 ]; do 

        PERL=$(cat<<"__PERL__"
use Net::Stomp;
my $host = shift @ARGV;
my $port = shift @ARGV;
my $stomp = Net::Stomp->new( { hostname => $host, port => $port } );
__PERL__
)
        perl -e "$PERL" $STOMP_HOST $STOMP_PORT $STOMP_USER $STOMP_PASS &> /dev/null
        if [ $? -ne 0 ]; then
            echo -n "."
            END_TIME=$(date +%s)
            TOTAL_TIME=$(($END_TIME - $START_TIME))
            if [ $TOTAL_TIME -gt $MAX_ACTIVEMQ_WAIT_TIME ]; then
                echo "\nFailed: ActiveMQ took too long to become available"
                exit 1
            fi
            sleep 5
        else
            sleep 1
            echo "available"
            break
        fi
    done
}

install_maestro_plugins() {
    echo -n "Checking if LuCEE is available for plugin installation..."
    
    # check if LuCEE is ready to install plugins
    $MAESTRO_BIN/maestro-plugins list > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "not ready"
    
        # wait for LuCEE to start
        START_TIME=$(date +%s)
        echo -n "Waiting for LuCEE to become available..."
        while [ 1 -eq 1 ]; do 
            $MAESTRO_BIN/maestro-plugins list > /dev/null 2>&1
        
            if [ $? -ne 0 ]; then
                echo -n "."
                END_TIME=$(date +%s)
                TOTAL_TIME=$(($END_TIME - $START_TIME))
                if [ $TOTAL_TIME -gt $MAX_LUCEE_WAIT_TIME ]; then
                    echo "\nFailed: LuCEE took too long to start"
                    exit 1
                fi
                sleep 5
            else
                echo "running"
                break
            fi
        done
    else
        echo "ready"
    fi
    
    # install some plugins
    echo "Installing Maestro Plugins"
    if [ $ENABLE_SNAPSHOTS -eq 0 ]; then
        $MAESTRO_BIN/maestro-plugins install all
    else
        $MAESTRO_BIN/maestro-plugins --snapshots install all
    fi
    RETVAL=$?
    if [ $RETVAL -ne 0 ]; then
        echo "Failed to install Maestro Plugins"
        exit 1
    fi
    echo "Installed Maestro Plugins"
}

is_package_installed() {
    if (rpm -qa | grep $1 &> /dev/null); then
        return 0
    fi
    return 1
}

ensure_package_installed() {
    if ! (rpm -qa | grep $1 &> /dev/null); then
        echo "Installing package '$1'"
        yum -y install $1

        RETVAL=$?
        if [ $RETVAL -ne 0 ]; then
            echo "Unable to install package '$1'"
            exit 1
        fi
    fi
}

ensure_service_running() {
    if [[ -z `/sbin/service $1 status | grep 'is running'` ]]; then
        echo "Starting '$1'..."
        /sbin/service $1 start &> /dev/null 2>&1

        # wait for service to start
        START_TIME=$(date +%s)
        echo -n "Waiting for '$1' to start..."
        while [ 1 -eq 1 ]; do 
            if [[ -z `/sbin/service $1 status | grep 'is running'` ]]; then
                echo -n "."
                END_TIME=$(date +%s)
                TOTAL_TIME=$(($END_TIME - $START_TIME))
                if [ $TOTAL_TIME -gt $MAX_SERVICE_WAIT_TIME ]; then
                    echo "\nFailed: '$1' took too long to start"
                    exit 1
                fi
                # give it a couple more second to settle
                sleep 2
            else
                echo "running"
                break
            fi
        done
    fi
}

main "$@"
